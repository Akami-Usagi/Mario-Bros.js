/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 .\Goomba.glb 
*/

import React, { useRef, useState, useEffect, useMemo } from 'react'
import { useGLTF, useAnimations, PositionalAudio } from '@react-three/drei'
import { BallCollider, RigidBody } from '@react-three/rapier'
import { useFrame, useGraph } from '@react-three/fiber'
import { useStore } from '../store'
import { useGSAP } from '@gsap/react'
import gsap from 'gsap'
import { act } from 'react'
import { SkeletonUtils } from "three-stdlib";

export function Goomba({position}) {
  const group = useRef()
  const { scene, animations } = useGLTF('/Goomba.glb')
  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);
  const { actions } = useAnimations(animations, group)
  const rb = useRef();
  const hitBox = useRef();
  const [alive, setAlive] = useState(true)
  const [showGoomba, setShowGoomba] = useState(true)
  const [rotation, setRotation] = useState(false)
  const { shoes } = useStore();
  const stompSound = useRef();
  
  useEffect(() => {
    actions["walk"].play();
    actions["walk"].setEffectiveTimeScale(2);
  return () => actions["walk"].stop();
}, []);


useGSAP(() => {
  if(rotation) {
    gsap.to(group.current.rotation, {
      y: 0,
      duration: 0.3,
      ease: "expo.inOut",
    });
  } else {
    gsap.to(group.current.rotation, {
      y: Math.PI,
      duration: 0.3,
      ease: "expo.inOut",
    });
  }
}, [rotation]);
  useFrame((state,delta) => {
    if(!hitBox.current && !rb.current && !alive) return;
    hitBox.current.setTranslation({x: rb.current.translation().x, y: rb.current.translation().y + 0.7, z: rb.current.translation().z})
    rb.current.setLinvel({x: rb.current.linvel().x, y: rb.current.linvel().y, z: rotation ? 2 * delta * 144 : -2 * delta * 144})
  })
  

  useGSAP(() => {
    if(!alive) {
      stompSound.current.play();
      gsap.to(group.current.position, {
        y: -0.6,
        duration: 0.1,
        onComplete: () => {
          rb.current.setTranslation({x: 0, y: -10, z: 0})
          actions["walk"].stop();
        }
      })

      gsap.to(group.current.scale,{
        y:0.1,
        duration: 0.1
      })
      actions["walk"].setEffectiveTimeScale(0);
      actions["walk"].stop();

    }

  }, [alive])

  return (<>
   <RigidBody
        type="fixed"
        sensor
        position={position}
        ref={hitBox}
        onIntersectionEnter={(e) => {
          if(e.other.rigidBodyObject.name === "player" && alive) {
            shoes.jumpAllowed = true;
            setAlive(false);
          }
        }}
      >
        <mesh>
          <boxGeometry args={[1, 0.5, 0.9]} />
          <meshBasicMaterial color="red" visible={false} />
        </mesh>
      </RigidBody>
    <RigidBody type="dynamic"
    colliders={false}
    ref={rb}
    enabledRotations={[false, false, false]}
    canSleep={false}
    ccd
    name="goomba"
    position={position}
    onCollisionEnter={(e) => {
      if(e.other.rigidBodyObject.name === "pipe" || e.other.rigidBodyObject.name === "goomba") {
        setRotation(!rotation)
      }
    }}
    >
    <BallCollider args={[0.6]}/>
    <group ref={group} position={[0, -.6, 0]} rotation={[0, Math.PI, 0]} dispose={null}>
      <group name="Goomba">
        <group name="Goomba_1">
          <group name="nw4f_root">
            <group name="AllRoot">
              <primitive object={nodes.JointRoot} />
            </group>
            <group name="Kuribo">
              <group name="Body" />
              <group name="EyeClose" />
              <group name="EyeHalfClose" />
              <group name="EyeOpen" />
            </group>
          </group>
          <skinnedMesh name="Body__KuriboBodyMat00" geometry={nodes.Body__KuriboBodyMat00.geometry} material={materials.KuriboBodyMat00} skeleton={nodes.Body__KuriboBodyMat00.skeleton} />
          <skinnedMesh name="Body__KuriboEyeMat00" geometry={nodes.Body__KuriboEyeMat00.geometry} material={materials.KuriboEyeMat00} skeleton={nodes.Body__KuriboEyeMat00.skeleton} />
          <skinnedMesh name="EyeOpen__KuriboBodyMat00" geometry={nodes.EyeOpen__KuriboBodyMat00.geometry} material={materials.KuriboBodyMat00} skeleton={nodes.EyeOpen__KuriboBodyMat00.skeleton} />
          <skinnedMesh name="EyeOpen__KuriboEyeMat00" geometry={nodes.EyeOpen__KuriboEyeMat00.geometry} material={materials.KuriboEyeMat00} skeleton={nodes.EyeOpen__KuriboEyeMat00.skeleton} />
        </group>
      </group>
    </group>
    <PositionalAudio ref={stompSound} url="/sounds/stomp.wav" distance={1000} loop={false}  />
    </RigidBody>
    </>
  )
}

useGLTF.preload('/Goomba.glb')
